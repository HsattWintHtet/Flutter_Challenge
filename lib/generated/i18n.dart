import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get EventBus => "EventBus";
  String get Gesture => "Gesture";
  String get GridView => "GridView";
  String get Inherited => "Inherited";
  String get ListView => "ListView";
  String get Notify => "Notify";
  String get Pointer => "Pointer";
  String get ScrollView => "ScrollView";
  String get Sliver => "Sliver";
  String get Theme => "Theme";
  String get animation => "Animation";
  String get boxDecoration => "BoxDecoration";
  String get container => "Container";
  String get customization => "Customization";
  String get flex => "Flex";
  String get flutter_challenge => "Flutter Challenge";
  String get functional => "Functional";
  String get layout_challenge => "Layout Challenge";
  String get login => "Login";
  String get logout => "LogOut";
  String get my_challenge => "My challenge";
  String get network => "Network";
  String get push_text => "You have pushed the screen this many times:";
  String get scrollable => "Scrollable";
  String get stack => "Stack";
  String get tap_counter => "Tap Counter";
  String get transform => "Transform";
  String get wrappedRow => "WrappedRow";
}

class $zh_TW extends S {
  const $zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get container => "容器";
  @override
  String get functional => "功能性元件";
  @override
  String get stack => "堆疊介面";
  @override
  String get customization => "個性化";
  @override
  String get Notify => "通知";
  @override
  String get my_challenge => "我的挑戰";
  @override
  String get Pointer => "指標";
  @override
  String get EventBus => "觀察者";
  @override
  String get login => "登入";
  @override
  String get network => "網路";
  @override
  String get wrappedRow => "自動跳行";
  @override
  String get logout => "登出";
  @override
  String get transform => "轉換";
  @override
  String get ListView => "列表";
  @override
  String get Sliver => "融合";
  @override
  String get flex => "彈性布局";
  @override
  String get Gesture => "手勢";
  @override
  String get push_text => "你已經按了螢幕這麼多下:";
  @override
  String get scrollable => "可捲動元件";
  @override
  String get Inherited => "繼承";
  @override
  String get flutter_challenge => "Flutter 挑戰";
  @override
  String get tap_counter => "點擊計數器";
  @override
  String get animation => "動畫";
  @override
  String get layout_challenge => "介面挑戰";
  @override
  String get ScrollView => "滾動條";
  @override
  String get Theme => "主題";
  @override
  String get boxDecoration => "形狀裝飾";
  @override
  String get GridView => "格狀";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "TW"),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_TW":
          return SynchronousFuture<S>(const $zh_TW());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
